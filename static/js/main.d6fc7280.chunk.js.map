{"version":3,"sources":["store/list.js","store/formValidation.js","store/formState.js","store/dialog.js","StaffList/StaffListHeader.jsx","PersonBtn/PersonBtn.jsx","StaffList/StaffListControls.jsx","StaffList/StaffListCell.jsx","StaffList/StaffListRow.jsx","StaffList/StaffList.jsx","store/professions.js","PersonForm/PersonForm.jsx","PersonDialog/PersonDialogContent.jsx","PersonDialog/PersonDialog.jsx","App.js","reportWebVitals.js","index.js"],"names":["keys","surname","name","patronymic","position","dateOfBirth","gender","dateOfHiring","dateOfFiring","isDriver","controls","list","1","2","3","4","5","makeAutoObservable","this","id","parseInt","Math","random","generatePersonId","person","setLocalStorage","storage","localStorage","getItem","JSON","parse","setItem","stringify","isValid","validationRules","string","regExp","msg","stringGender","date","bool","fieldValidStatus","rule","required","customRule","olderThenDateOfHiring","formData","hired","Date","getTime","fired","isNaN","formdata","value","test","Object","forEach","key","entries","error","isFieldValid","state","event","target","checked","open","type","personId","addPersonConfirm","editPersonConfirm","deletePersonConfirm","setClose","personFormCancel","deletePersonCancel","formValidation","resetFieldValidStatus","validateForm","formState","addPerson","resetForm","editPerson","deletePerson","useStyles","makeStyles","tableHeader","backgroundColor","tableHeaderCell","color","fontWeight","StaffListHeader","props","classes","headers","values","staffKeys","map","header","TableCell","className","TableHead","TableRow","PersonBtn","add","title","icon","fontSize","createDialog","dialog","setOpen","setType","edit","editState","setPersonId","delete","Tooltip","IconButton","aria-label","onClick","flex","display","StaffListControls","StaffListCell","cellContent","columnHeader","cellValue","split","reverse","join","dataHandler","StaffListRow","row","staffList","tableContainer","margin","observer","rows","TableContainer","component","Paper","Table","TableBody","professions","form","width","inputGroup","justifyContent","marginBottom","textInput","formControl","positions","option","MenuItem","handleChangeText","handleChangeTextInput","bind","handleChangeCheck","surnameMsg","nameMsg","patronymicMsg","positionMsg","dateOfBirthMsg","genderMsg","dateOfHiringMsg","dateOfFiringMsg","TextField","onChange","InputLabelProps","shrink","Boolean","helperText","label","variant","select","FormControl","FormLabel","RadioGroup","defaultValue","FormControlLabel","control","Radio","labelPlacement","FormHelperText","Checkbox","PersonDialogContent","content","DialogContent","AddPersonDialog","maxWidth","onClose","aria-labelledby","DialogTitle","DialogActions","Button","cancelBtnAction","confirmBtnAction","confirmBtnText","getLocalStorage","container","textAlign","Container","Typography","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d6fc7280.chunk.js","sourcesContent":["import { makeAutoObservable } from \"mobx\";\n\nclass List {\n  keys = {\n    surname: \"Фамилия\",\n    name: \"Имя\",\n    patronymic: \"Отчество\",\n    position: \"Должность\",\n    dateOfBirth: \"Дата рождения\",\n    gender: \"Пол\",\n    dateOfHiring: \"Дата приема на работу\",\n    dateOfFiring: \"Дата увольнения\",\n    isDriver: \"Наличие прав\",\n    controls: \"\",\n    // colleagues: \"Коллеги\",\n  };\n  list = {\n    1: {\n      surname: \"Иванов\",\n      name: \"Иван\",\n      patronymic: \"Иванович\",\n      position: \"Директор\",\n      dateOfBirth: \"1980-01-01\",\n      gender: \"Мужской\",\n      dateOfHiring: \"2010-01-01\",\n      dateOfFiring: \"\",\n      isDriver: true,\n      // colleagues: [1, 2, 4],\n    },\n    2: {\n      surname: \"Петров\",\n      name: \"Петр\",\n      patronymic: \"Петрович\",\n      position: \"Бухгалтер\",\n      dateOfBirth: \"1990-01-01\",\n      gender: \"Мужской\",\n      dateOfHiring: \"2012-01-01\",\n      dateOfFiring: \"\",\n      isDriver: true,\n      // colleagues: [1, 2, 4],\n    },\n    3: {\n      surname: \"Алексеева\",\n      name: \"Екатерина\",\n      patronymic: \"Владимировна\",\n      position: \"Секретарь\",\n      dateOfBirth: \"1999-01-01\",\n      gender: \"Женский\",\n      dateOfHiring: \"2010-02-01\",\n      dateOfFiring: \"\",\n      isDriver: true,\n      // colleagues: [1, 2, 4],\n    },\n    4: {\n      surname: \"Ульянов\",\n      name: \"Игорь\",\n      patronymic: \"Иванович\",\n      position: \"Дворник\",\n      dateOfBirth: \"1970-01-01\",\n      gender: \"Мужской\",\n      dateOfHiring: \"2013-01-01\",\n      dateOfFiring: \"2016-01-01\",\n      isDriver: false,\n      // colleagues: [1, 2, 4],\n    },\n    5: {\n      surname: \"Дмитриченко\",\n      name: \"Ольга\",\n      patronymic: \"Евгениевна\",\n      position: \"Уборщица\",\n      dateOfBirth: \"1978-01-01\",\n      gender: \"Женский\",\n      dateOfHiring: \"2020-01-01\",\n      dateOfFiring: \"\",\n      isDriver: false,\n      // colleagues: [1, 2, 4],\n    },\n  };\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  generatePersonId() {\n    const id = parseInt(Math.random() * 10000);\n    return this.list[id] ? this.generatePersonId() : id;\n  }\n\n  addPerson(person) {\n    const id = this.generatePersonId();\n    this.list[id] = { ...person };\n    this.setLocalStorage();\n  }\n\n  deletePerson(id) {\n    delete this.list[id];\n    this.setLocalStorage();\n  }\n\n  editPerson(id, person) {\n    this.list[id] = { ...person };\n    this.setLocalStorage();\n  }\n\n  getLocalStorage() {\n    const storage = localStorage.getItem(\"staffListTestWork\");\n    this.list = JSON.parse(storage);\n  }\n\n  setLocalStorage() {\n    localStorage.setItem(\"staffListTestWork\", JSON.stringify(this.list));\n  }\n}\n\nexport default new List();\n","import { makeAutoObservable } from \"mobx\";\n\nclass FormValidation {\n  isValid = true;\n\n  validationRules = {\n    string: {\n      regExp: /[0-9a-zA-Zа-яёА-ЯЁ]{3,}/,\n      msg: \"Поле обязательное, минимальная длина 3 символа\",\n    },\n    stringGender: {\n      regExp: /[0-9a-zA-Zа-яёА-ЯЁ]{3,}/,\n      msg: \"Поле обязательное\",\n    },\n    date: { regExp: /[0-9]{3,}/, msg: \"Поле обязательное\" },\n    bool: { regExp: /(true|false|1|0)/, msg: \"Не верный формат\" },\n  };\n\n  fieldValidStatus = {\n    surname: { rule: \"string\", required: true },\n    name: { rule: \"string\", required: true },\n    patronymic: { rule: \"string\", required: false },\n    position: { rule: \"string\", required: true },\n    dateOfBirth: { rule: \"date\", required: true },\n    gender: { rule: \"stringGender\", required: true },\n    dateOfHiring: { rule: \"date\", required: true },\n    dateOfFiring: {\n      rule: \"date\",\n      customRule: this.olderThenDateOfHiring,\n      required: false,\n    },\n    isDriver: { rule: \"bool\", required: false },\n  };\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  olderThenDateOfHiring(formData) {\n    const hired = new Date(formData.dateOfHiring).getTime();\n    const fired = new Date(formData.dateOfFiring).getTime();\n\n    if (isNaN(fired)) return;\n\n    return hired < fired ? \"\" : \"Не может быть меньше даты приема на работу\";\n  }\n\n  isFieldValid(formdata, required, value, rule, customRule) {\n    if (customRule) {\n      return customRule(formdata);\n    }\n    if (!value && !required) {\n      return \"\";\n    }\n    if (!required) {\n      return \"\";\n    }\n    return this.validationRules[rule].regExp.test(value)\n      ? \"\"\n      : this.validationRules[rule].msg;\n  }\n\n  resetFieldValidStatus() {\n    Object.keys(this.fieldValidStatus).forEach((key) => {\n      this.fieldValidStatus[key].msg = \"\";\n      this.isValid = true;\n    });\n  }\n\n  validateForm(formData) {\n    Object.entries(formData).forEach(([name, value]) => {\n      const { rule, required, customRule } = this.fieldValidStatus[name];\n      const error = this.isFieldValid(\n        formData,\n        required,\n        value,\n        rule,\n        customRule\n      );\n      if (error) {\n        this.isValid = false;\n      }\n      this.fieldValidStatus[name].msg = error;\n    });\n  }\n}\n\nexport default new FormValidation();\n","import { makeAutoObservable } from \"mobx\";\n\nclass FormState {\n  state = {\n    surname: \"\",\n    name: \"\",\n    patronymic: \"\",\n    position: \"\",\n    dateOfBirth: \"\",\n    gender: \"\",\n    dateOfHiring: \"\",\n    dateOfFiring: \"\",\n    isDriver: false,\n  };\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  handleChangeTextInput(event) {\n    this.state[event.target.name] = event.target.value;\n  }\n\n  handleChangeCheck(event) {\n    this.state[event.target.name] = event.target.checked;\n  }\n\n  resetForm() {\n    this.state = {\n      surname: \"\",\n      name: \"\",\n      patronymic: \"\",\n      position: \"\",\n      dateOfBirth: \"\",\n      gender: \"\",\n      dateOfHiring: \"\",\n      dateOfFiring: \"\",\n      isDriver: false,\n    };\n  }\n\n  editState(person) {\n    this.state = { ...person };\n  }\n}\n\nexport default new FormState();\n","import { makeAutoObservable } from \"mobx\";\n\nimport formValidation from \"./formValidation\";\nimport formState from \"./formState\";\nimport list from \"./list\";\n\nclass Dialog {\n  open = false;\n  type = \"\";\n  personId = 0;\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  setOpen() {\n    this.open = true;\n  }\n\n  setClose() {\n    this.open = false;\n  }\n\n  setType(type) {\n    this.type = type;\n  }\n\n  setPersonId(id) {\n    this.personId = id;\n  }\n\n  get title() {\n    if (this.type === \"add\") return \"Добавить сотрудника\";\n    if (this.type === \"edit\") return \"Отредактировать запись\";\n    if (this.type === \"delete\") return \"Удалить сотрудника\";\n    return \"\";\n  }\n\n  get confirmBtnText() {\n    if (this.type === \"add\") return \"Добавить сотрудника\";\n    if (this.type === \"edit\") return \"Отредактировать данные\";\n    if (this.type === \"delete\") return \"Удалить сотрудника\";\n    return \"\";\n  }\n\n  get confirmBtnAction() {\n    if (this.type === \"add\") return this.addPersonConfirm;\n    if (this.type === \"edit\") return this.editPersonConfirm;\n    if (this.type === \"delete\") return this.deletePersonConfirm;\n    return this.setClose;\n  }\n\n  get cancelBtnAction() {\n    if (this.type === \"add\") return this.personFormCancel;\n    if (this.type === \"edit\") return this.personFormCancel;\n    if (this.type === \"delete\") return this.deletePersonCancel;\n    return this.setClose;\n  }\n\n  addPersonConfirm() {\n    formValidation.resetFieldValidStatus();\n\n    formValidation.validateForm(formState.state);\n    if (formValidation.isValid) {\n      list.addPerson(formState.state);\n      formState.resetForm();\n      this.setClose();\n    }\n  }\n\n  personFormCancel() {\n    formValidation.resetFieldValidStatus();\n    formState.resetForm();\n    this.setClose();\n  }\n\n  editPersonConfirm() {\n    formValidation.resetFieldValidStatus();\n\n    formValidation.validateForm(formState.state);\n    if (formValidation.isValid) {\n      list.editPerson(this.personId, formState.state);\n      formState.resetForm();\n      this.setClose();\n    }\n  }\n\n  deletePersonConfirm() {\n    list.deletePerson(this.personId);\n    this.setClose();\n  }\n\n  deletePersonCancel() {\n    this.setClose();\n  }\n}\n\nexport default new Dialog();\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\n\nconst useStyles = makeStyles({\n  tableHeader: {\n    backgroundColor: \"black\",\n  },\n  tableHeaderCell: {\n    color: \"white\",\n    fontWeight: \"bold\",\n  },\n});\n\nexport default function StaffListHeader(props) {\n  const classes = useStyles();\n\n  const headers = Object.values(props.staffKeys).map((header) => (\n    <TableCell className={classes.tableHeaderCell} key={header}>\n      {header}\n    </TableCell>\n  ));\n\n  return (\n    <TableHead>\n      <TableRow className={classes.tableHeader}>{headers}</TableRow>\n    </TableHead>\n  );\n}\n","import React from \"react\";\n\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport PersonAddSharpIcon from \"@material-ui/icons/PersonAddSharp\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\n\nimport formState from \"../store/formState\";\nimport list from \"../store/list\";\nimport dialog from \"../store/dialog\";\n\nexport default function PersonBtn(props) {\n  const { type } = props;\n\n  const buttonType = {\n    add: {\n      title: \"Добавить сотрудника\",\n      icon: <PersonAddSharpIcon color=\"secondary\" fontSize=\"large\" />,\n      createDialog() {\n        dialog.setOpen();\n        dialog.setType(\"add\");\n      },\n    },\n    edit: {\n      title: \"Отредактировать запись\",\n      icon: <EditIcon color=\"primary\" />,\n      createDialog() {\n        dialog.setOpen();\n        dialog.setType(\"edit\");\n        formState.editState(list.list[props.id]);\n        dialog.setPersonId(props.id);\n      },\n    },\n    delete: {\n      title: \"Удалить запись\",\n      icon: <DeleteIcon color=\"secondary\" />,\n      createDialog() {\n        dialog.setOpen();\n        dialog.setType(\"delete\");\n        dialog.setPersonId(props.id);\n      },\n    },\n  };\n\n  const { title, createDialog, icon } = buttonType[type];\n\n  return (\n    <div>\n      <Tooltip title={title}>\n        <IconButton aria-label={title} onClick={createDialog}>\n          {icon}\n        </IconButton>\n      </Tooltip>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport PersonBtn from \"./../PersonBtn/PersonBtn\";\n\nconst useStyles = makeStyles({\n  flex: {\n    display: \"flex\",\n  },\n});\n\nexport default function StaffListControls(props) {\n  const classes = useStyles();\n  return (\n    <div className={classes.flex}>\n      <PersonBtn type=\"edit\" id={props.id} />\n      <PersonBtn type=\"delete\" id={props.id} />\n    </div>\n  );\n}\n","import TableCell from \"@material-ui/core/TableCell\";\n\nimport StaffListControls from \"./StaffListControls\";\n\nexport default function StaffListCell(props) {\n  const { columnHeader, cellValue } = props;\n\n  function dataHandler(columnHeader, cellValue) {\n    if (columnHeader === \"isDriver\") {\n      return cellValue ? \"Есть права\" : \"Права отсутствуют\";\n    }\n    if (columnHeader === \"dateOfFiring\" && cellValue === \"\") {\n      return \"Трудоустроен\";\n    }\n    if (\n      columnHeader === \"dateOfBirth\" ||\n      columnHeader === \"dateOfHiring\" ||\n      columnHeader === \"dateOfFiring\"\n    ) {\n      return cellValue.split(\"-\").reverse().join(\".\");\n    }\n    if (columnHeader === \"controls\") {\n      return <StaffListControls id={props.id} />;\n    }\n    return cellValue;\n  }\n\n  const cellContent = dataHandler(columnHeader, cellValue);\n\n  return <TableCell>{cellContent}</TableCell>;\n}\n","import TableRow from \"@material-ui/core/TableRow\";\n\nimport StaffListCell from \"./StaffListCell\";\n\nexport default function StaffListRow(props) {\n  const row = Object.keys(props.staffKeys).map((key) => (\n    <StaffListCell\n      key={props.id + props.person[key] + Math.random()}\n      staffList={props.staffList}\n      columnHeader={key}\n      cellValue={props.person[key]}\n      id={props.id}\n    />\n  ));\n\n  return <TableRow>{row}</TableRow>;\n}\n","import { observer } from \"mobx-react-lite\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport Paper from \"@material-ui/core/Paper\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\n\nimport StaffListHeader from \"./StaffListHeader\";\nimport StaffListRow from \"./StaffListRow\";\n\nimport list from \"../store/list\";\n\nconst useStyles = makeStyles({\n  tableContainer: {\n    margin: \"30px auto\",\n  },\n});\n\nexport default observer(function StaffList(props) {\n  const classes = useStyles();\n\n  const rows = Object.entries(list.list).map(([id, person]) => {\n    return (\n      <StaffListRow\n        key={id + person.surname}\n        staffKeys={list.keys}\n        staffList={list.list}\n        id={id}\n        person={person}\n      />\n    );\n  });\n\n  return (\n    <TableContainer className={classes.tableContainer} component={Paper}>\n      <Table>\n        <StaffListHeader staffKeys={list.keys} />\n        <TableBody>{rows}</TableBody>\n      </Table>\n    </TableContainer>\n  );\n});\n","import { makeAutoObservable } from \"mobx\";\n\nclass Professions {\n  professions = {\n    1: \"Директор\",\n    2: \"Бухгалтер\",\n    3: \"Секретарь\",\n    4: \"Дворник\",\n    5: \"Уборщица\",\n  };\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n}\n\nexport default new Professions();\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Radio from \"@material-ui/core/Radio\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\n\nimport formValidation from \"../store/formValidation\";\nimport professions from \"../store/professions\";\nimport formState from \"../store/formState\";\n\nconst useStyles = makeStyles({\n  form: {\n    width: 800,\n  },\n  inputGroup: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    marginBottom: 15,\n  },\n  textInput: {\n    width: \"47%\",\n  },\n  formControl: {\n    width: \"47%\",\n  },\n});\n\nexport default observer(function PersonForm(props) {\n  const classes = useStyles();\n\n  const positions = Object.values(professions.professions).map((option) => (\n    <MenuItem key={option} value={option}>\n      {option}\n    </MenuItem>\n  ));\n\n  // const colleagues = props.getColleaguesList().map((name) => (\n  //   <option key={name} value={name}>\n  //     {name}\n  //   </option>\n  // ));\n\n  const handleChangeText = formState.handleChangeTextInput.bind(formState);\n  const handleChangeCheck = formState.handleChangeCheck.bind(formState);\n\n  const {\n    surname: { msg: surnameMsg },\n    name: { msg: nameMsg },\n    patronymic: { msg: patronymicMsg },\n    position: { msg: positionMsg },\n    dateOfBirth: { msg: dateOfBirthMsg },\n    gender: { msg: genderMsg },\n    dateOfHiring: { msg: dateOfHiringMsg },\n    dateOfFiring: { msg: dateOfFiringMsg },\n  } = formValidation.fieldValidStatus;\n\n  return (\n    <form className={classes.form}>\n      <div className={classes.inputGroup}>\n        <TextField\n          className={classes.textInput}\n          onChange={handleChangeText}\n          InputLabelProps={{ shrink: true }}\n          value={formState.state.surname}\n          required\n          error={Boolean(surnameMsg)}\n          helperText={surnameMsg}\n          id=\"surnamePersonForm\"\n          name=\"surname\"\n          label=\"Фамилия\"\n          variant=\"outlined\"\n        />\n        <TextField\n          className={classes.textInput}\n          onChange={handleChangeText}\n          InputLabelProps={{ shrink: true }}\n          value={formState.state.name}\n          required\n          error={Boolean(nameMsg)}\n          helperText={nameMsg}\n          id=\"namePersonForm\"\n          name=\"name\"\n          label=\"Имя\"\n          variant=\"outlined\"\n        />\n      </div>\n      <div className={classes.inputGroup}>\n        <TextField\n          className={classes.textInput}\n          onChange={handleChangeText}\n          InputLabelProps={{ shrink: true }}\n          value={formState.state.patronymic}\n          error={Boolean(patronymicMsg)}\n          helperText={patronymicMsg}\n          id=\"patronymicPersonForm\"\n          name=\"patronymic\"\n          label=\"Отчество\"\n          variant=\"outlined\"\n        />\n        <TextField\n          className={classes.textInput}\n          required\n          select\n          value={formState.state.position}\n          error={Boolean(positionMsg)}\n          helperText={positionMsg}\n          InputLabelProps={{ shrink: true }}\n          onChange={handleChangeText}\n          id=\"positionPersonForm\"\n          name=\"position\"\n          label=\"Должность\"\n          variant=\"outlined\"\n        >\n          {positions}\n        </TextField>\n      </div>\n      <div className={classes.inputGroup}>\n        <TextField\n          className={classes.textInput}\n          value={formState.state.dateOfBirth}\n          error={Boolean(dateOfBirthMsg)}\n          helperText={dateOfBirthMsg}\n          InputLabelProps={{ shrink: true }}\n          onChange={handleChangeText}\n          required\n          id=\"dateOfBirthPersonForm\"\n          name=\"dateOfBirth\"\n          label=\"Дата рождения\"\n          type=\"date\"\n          variant=\"outlined\"\n        />\n        <FormControl className={classes.formControl} error={Boolean(genderMsg)}>\n          <FormLabel component=\"legend\" required>\n            Пол\n          </FormLabel>\n          <RadioGroup\n            row\n            id=\"genderPersonForm\"\n            onChange={handleChangeText}\n            value={formState.state.gender}\n            aria-label=\"gender\"\n            name=\"gender\"\n            defaultValue=\"top\"\n          >\n            <FormControlLabel\n              value=\"Женский\"\n              control={<Radio id=\"femalePersonForm\" color=\"primary\" />}\n              label=\"Женский\"\n              labelPlacement=\"start\"\n            />\n            <FormControlLabel\n              value=\"Мужской\"\n              control={<Radio id=\"malePersonForm\" color=\"primary\" />}\n              label=\"Мужской\"\n              labelPlacement=\"start\"\n            />\n          </RadioGroup>\n          <FormHelperText>{genderMsg}</FormHelperText>\n        </FormControl>\n      </div>\n      <div className={classes.inputGroup}>\n        <TextField\n          className={classes.textInput}\n          value={formState.state.dateOfHiring}\n          error={Boolean(dateOfHiringMsg)}\n          helperText={dateOfHiringMsg}\n          InputLabelProps={{ shrink: true }}\n          onChange={handleChangeText}\n          required\n          id=\"dateOfHiringPersonForm\"\n          name=\"dateOfHiring\"\n          label=\"Дата приема на работу\"\n          type=\"date\"\n          variant=\"outlined\"\n        />\n        <TextField\n          className={classes.textInput}\n          value={formState.state.dateOfFiring}\n          error={Boolean(dateOfFiringMsg)}\n          helperText={dateOfFiringMsg}\n          InputLabelProps={{ shrink: true }}\n          onChange={handleChangeText}\n          id=\"dateOfFiringPersonForm\"\n          name=\"dateOfFiring\"\n          label=\"Дата увольнения\"\n          type=\"date\"\n          variant=\"outlined\"\n        />\n      </div>\n      <div>\n        <FormControl>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={formState.state.isDriver}\n                onChange={handleChangeCheck}\n                id=\"isDriverPersonForm\"\n                name=\"isDriver\"\n              />\n            }\n            label=\"Наличие водительских прав\"\n          />\n        </FormControl>\n      </div>\n    </form>\n  );\n});\n","import DialogContent from \"@material-ui/core/DialogContent\";\n\nimport PersonForm from \"./../PersonForm/PersonForm\";\n\nexport default function PersonDialogContent(props) {\n  function getContent(type) {\n    if (type === \"add\" || type === \"edit\") {\n      return <PersonForm />;\n    }\n    if (type === \"delete\") {\n      return <div></div>;\n    }\n  }\n  const content = getContent(props.type);\n\n  return <DialogContent>{content}</DialogContent>;\n}\n","import React from \"react\";\n\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\n\nimport PersonDialogContent from \"./PersonDialogContent\";\n\nimport dialog from \"./../store/dialog\";\n\nexport default function AddPersonDialog(props) {\n  const { type } = dialog;\n\n  return (\n    <Dialog\n      maxWidth=\"md\"\n      open={dialog.open}\n      onClose={dialog.setClose.bind(dialog)}\n      aria-labelledby=\"form-dialog-title\"\n    >\n      <DialogTitle id=\"form-dialog-title\">{dialog.title}</DialogTitle>\n      <PersonDialogContent type={type} />\n      <DialogActions>\n        <Button onClick={dialog.cancelBtnAction.bind(dialog)} color=\"primary\">\n          Отмена\n        </Button>\n        <Button onClick={dialog.confirmBtnAction.bind(dialog)} color=\"primary\">\n          {dialog.confirmBtnText}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import list from \"./store/list\";\nimport dialog from \"./store/dialog\";\nimport { observer } from \"mobx-react-lite\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport Typography from \"@material-ui/core/Typography\";\nimport StaffList from \"./StaffList/StaffList\";\nimport PersonBtn from \"./PersonBtn/PersonBtn\";\nimport PersonDialog from \"./PersonDialog/PersonDialog\";\n\nconst localStorageMockup = () => {\n  localStorage.setItem(\"staffListTestWork\", JSON.stringify(list.list));\n  list.getLocalStorage();\n};\n\nif (!localStorage.getItem(\"staffListTestWork\")) {\n  localStorageMockup();\n} else {\n  list.getLocalStorage();\n}\n\nconst useStyles = makeStyles({\n  container: {\n    textAlign: \"center\",\n  },\n});\n\nexport default observer(function App(props) {\n  const classes = useStyles();\n\n  return (\n    <div className=\"App\">\n      <Container maxWidth={false} className={classes.container}>\n        <Typography variant=\"h2\" component=\"h2\">\n          Реестр сотрудников\n        </Typography>\n        <StaffList />\n        <PersonBtn type=\"add\" />\n        <PersonDialog open={dialog.open} />\n      </Container>\n    </div>\n  );\n});\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}